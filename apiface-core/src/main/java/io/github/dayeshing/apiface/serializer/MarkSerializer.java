// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mark.proto

package io.github.dayeshing.apiface.serializer;

public final class MarkSerializer {
  private MarkSerializer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MarkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mark)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    java.util.List<ClassMarkSerializer.ClassMark>
        getMarksList();
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    ClassMarkSerializer.ClassMark getMarks(int index);
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    int getMarksCount();
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    java.util.List<? extends ClassMarkSerializer.ClassMarkOrBuilder>
        getMarksOrBuilderList();
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    ClassMarkSerializer.ClassMarkOrBuilder getMarksOrBuilder(
            int index);
  }
  /**
   * Protobuf type {@code Mark}
   */
  public static final class Mark extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Mark)
      MarkOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Mark.newBuilder() to construct.
    private Mark(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Mark() {
      marks_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Mark();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Mark(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                marks_ = new java.util.ArrayList<ClassMarkSerializer.ClassMark>();
                mutable_bitField0_ |= 0x00000001;
              }
              marks_.add(
                  input.readMessage(ClassMarkSerializer.ClassMark.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          marks_ = java.util.Collections.unmodifiableList(marks_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MarkSerializer.internal_static_Mark_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MarkSerializer.internal_static_Mark_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Mark.class, Builder.class);
    }

    public static final int MARKS_FIELD_NUMBER = 1;
    private java.util.List<ClassMarkSerializer.ClassMark> marks_;
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    @Override
    public java.util.List<ClassMarkSerializer.ClassMark> getMarksList() {
      return marks_;
    }
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    @Override
    public java.util.List<? extends ClassMarkSerializer.ClassMarkOrBuilder>
        getMarksOrBuilderList() {
      return marks_;
    }
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    @Override
    public int getMarksCount() {
      return marks_.size();
    }
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    @Override
    public ClassMarkSerializer.ClassMark getMarks(int index) {
      return marks_.get(index);
    }
    /**
     * <code>repeated .ClassMark marks = 1;</code>
     */
    @Override
    public ClassMarkSerializer.ClassMarkOrBuilder getMarksOrBuilder(
        int index) {
      return marks_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < marks_.size(); i++) {
        output.writeMessage(1, marks_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < marks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, marks_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Mark)) {
        return super.equals(obj);
      }
      Mark other = (Mark) obj;

      if (!getMarksList()
          .equals(other.getMarksList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getMarksCount() > 0) {
        hash = (37 * hash) + MARKS_FIELD_NUMBER;
        hash = (53 * hash) + getMarksList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Mark parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Mark parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Mark parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Mark parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Mark parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Mark parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Mark parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Mark parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Mark parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Mark parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Mark parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Mark parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Mark prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mark}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mark)
        MarkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MarkSerializer.internal_static_Mark_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MarkSerializer.internal_static_Mark_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Mark.class, Builder.class);
      }

      // Construct using io.github.dayeshing.apiface.serializer.MarkSerializer.Mark.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMarksFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (marksBuilder_ == null) {
          marks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          marksBuilder_.clear();
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MarkSerializer.internal_static_Mark_descriptor;
      }

      @Override
      public Mark getDefaultInstanceForType() {
        return Mark.getDefaultInstance();
      }

      @Override
      public Mark build() {
        Mark result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Mark buildPartial() {
        Mark result = new Mark(this);
        int from_bitField0_ = bitField0_;
        if (marksBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            marks_ = java.util.Collections.unmodifiableList(marks_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.marks_ = marks_;
        } else {
          result.marks_ = marksBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Mark) {
          return mergeFrom((Mark)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Mark other) {
        if (other == Mark.getDefaultInstance()) return this;
        if (marksBuilder_ == null) {
          if (!other.marks_.isEmpty()) {
            if (marks_.isEmpty()) {
              marks_ = other.marks_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMarksIsMutable();
              marks_.addAll(other.marks_);
            }
            onChanged();
          }
        } else {
          if (!other.marks_.isEmpty()) {
            if (marksBuilder_.isEmpty()) {
              marksBuilder_.dispose();
              marksBuilder_ = null;
              marks_ = other.marks_;
              bitField0_ = (bitField0_ & ~0x00000001);
              marksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMarksFieldBuilder() : null;
            } else {
              marksBuilder_.addAllMessages(other.marks_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Mark parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Mark) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<ClassMarkSerializer.ClassMark> marks_ =
        java.util.Collections.emptyList();
      private void ensureMarksIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          marks_ = new java.util.ArrayList<ClassMarkSerializer.ClassMark>(marks_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClassMarkSerializer.ClassMark, ClassMarkSerializer.ClassMark.Builder, ClassMarkSerializer.ClassMarkOrBuilder> marksBuilder_;

      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public java.util.List<ClassMarkSerializer.ClassMark> getMarksList() {
        if (marksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(marks_);
        } else {
          return marksBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public int getMarksCount() {
        if (marksBuilder_ == null) {
          return marks_.size();
        } else {
          return marksBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public ClassMarkSerializer.ClassMark getMarks(int index) {
        if (marksBuilder_ == null) {
          return marks_.get(index);
        } else {
          return marksBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder setMarks(
          int index, ClassMarkSerializer.ClassMark value) {
        if (marksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMarksIsMutable();
          marks_.set(index, value);
          onChanged();
        } else {
          marksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder setMarks(
          int index, ClassMarkSerializer.ClassMark.Builder builderForValue) {
        if (marksBuilder_ == null) {
          ensureMarksIsMutable();
          marks_.set(index, builderForValue.build());
          onChanged();
        } else {
          marksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder addMarks(ClassMarkSerializer.ClassMark value) {
        if (marksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMarksIsMutable();
          marks_.add(value);
          onChanged();
        } else {
          marksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder addMarks(
          int index, ClassMarkSerializer.ClassMark value) {
        if (marksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMarksIsMutable();
          marks_.add(index, value);
          onChanged();
        } else {
          marksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder addMarks(
          ClassMarkSerializer.ClassMark.Builder builderForValue) {
        if (marksBuilder_ == null) {
          ensureMarksIsMutable();
          marks_.add(builderForValue.build());
          onChanged();
        } else {
          marksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder addMarks(
          int index, ClassMarkSerializer.ClassMark.Builder builderForValue) {
        if (marksBuilder_ == null) {
          ensureMarksIsMutable();
          marks_.add(index, builderForValue.build());
          onChanged();
        } else {
          marksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder addAllMarks(
          Iterable<? extends ClassMarkSerializer.ClassMark> values) {
        if (marksBuilder_ == null) {
          ensureMarksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, marks_);
          onChanged();
        } else {
          marksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder clearMarks() {
        if (marksBuilder_ == null) {
          marks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          marksBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public Builder removeMarks(int index) {
        if (marksBuilder_ == null) {
          ensureMarksIsMutable();
          marks_.remove(index);
          onChanged();
        } else {
          marksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public ClassMarkSerializer.ClassMark.Builder getMarksBuilder(
          int index) {
        return getMarksFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public ClassMarkSerializer.ClassMarkOrBuilder getMarksOrBuilder(
          int index) {
        if (marksBuilder_ == null) {
          return marks_.get(index);  } else {
          return marksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public java.util.List<? extends ClassMarkSerializer.ClassMarkOrBuilder>
           getMarksOrBuilderList() {
        if (marksBuilder_ != null) {
          return marksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(marks_);
        }
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public ClassMarkSerializer.ClassMark.Builder addMarksBuilder() {
        return getMarksFieldBuilder().addBuilder(
            ClassMarkSerializer.ClassMark.getDefaultInstance());
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public ClassMarkSerializer.ClassMark.Builder addMarksBuilder(
          int index) {
        return getMarksFieldBuilder().addBuilder(
            index, ClassMarkSerializer.ClassMark.getDefaultInstance());
      }
      /**
       * <code>repeated .ClassMark marks = 1;</code>
       */
      public java.util.List<ClassMarkSerializer.ClassMark.Builder>
           getMarksBuilderList() {
        return getMarksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ClassMarkSerializer.ClassMark, ClassMarkSerializer.ClassMark.Builder, ClassMarkSerializer.ClassMarkOrBuilder>
          getMarksFieldBuilder() {
        if (marksBuilder_ == null) {
          marksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ClassMarkSerializer.ClassMark, ClassMarkSerializer.ClassMark.Builder, ClassMarkSerializer.ClassMarkOrBuilder>(
                  marks_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          marks_ = null;
        }
        return marksBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Mark)
    }

    // @@protoc_insertion_point(class_scope:Mark)
    private static final Mark DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Mark();
    }

    public static Mark getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Mark>
        PARSER = new com.google.protobuf.AbstractParser<Mark>() {
      @Override
      public Mark parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Mark(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Mark> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Mark> getParserForType() {
      return PARSER;
    }

    @Override
    public Mark getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mark_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Mark_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\nMark.proto\032\017ClassMark.proto\"!\n\004Mark\022\031\n" +
      "\005marks\030\001 \003(\0132\n.ClassMarkB.\n\034com.daysh.ap" +
      "iface.serializerB\016MarkSerializerb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          ClassMarkSerializer.getDescriptor(),
        });
    internal_static_Mark_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Mark_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Mark_descriptor,
        new String[] { "Marks", });
    ClassMarkSerializer.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
