import el_en from 'element-ui/lib/locale/lang/en'
var en = {
  input: "Please enter content",
  enable: "Enable",
  cancle: "Cancel",
  save: "Save",
  del: "Delete",
  opt: "Operate",
  layout: {
    index: {
      title: "apiface",
      addr: "Please enter the API document resolution address",
      his: "Query History",
      input: "Custom input",
      tips: "Please enter a legal url address",
      vm: "Integrated Environment",
      addr1: "API Document Address"

    },
    layout: {
      portfolio: 'Request Configuration',
      dribbble: 'Document Configuration',
      linkedin: 'Information',
      tips: "Page integration mode is configurable",
      loading: 'loading...',
    }
  },
  page: {
    blank: "No Data",
    case: {
      label: "Test Case",
      reqTime: "ReqTime:",
      resTime: "RespTime:",
      diff: "TakesTime:",
      code: "Code:",
      reqHead: "RequestHeader / COOKIE / Authenticate",
      respHead: "ResponseHeader",
      body: "ResponseBody",
    },
    index: {
      tips: "Tips : Entering the document mode will not be able to test the use case",
      active: "OperationMode",
      inactive: "DocumentMode",
      addr: "API URL:",
      tags: "Label:",
      methods: "RequestMethod:",
      respm: "ResponseType:",

      label: "Request Parameter",
      enable: "Enable",
      details: "Detail",
      required: "Required",
      req: "YES",
      noreq: "NO",
      param: "Parameter Name",
      value: "Parameter Value",
      desc: "Parameter Meaning / Description",
      self: "Custom Parameters",
      type: "Data Type",
      s: "String",
      n: "Decimal",
      i: "Integer",
      b: "Boolean",
      format: "Format",
      sel: "Select All",
      has: "Already Selected ",
      item: " Item",
      add: "Add Param",
      fill: "Fill Param",
      ty: "Give It A Try",
      warn: "These parameters must be enabled",
      label2: "Response Content",
      serial: "Format",
      nodata: "Unable to associate object, expected to return empty object",
      array: "Unable to associate array",
      base: "Basic data type or its packaging class",
      nometa: "No metadata description found",
      show: "Expand All",
      hidden: "Take Back Part",
      noparam: "* No Parameters",
      respcode: "#####  Status Code:",
      pt: "#####  Parameter:",
      json: "JSON(application/json)",
      form: "FORM(application/x-www-form-urlencoded)",

      focus: "focus",
      contact: "contact",
      version: "version",
      date: "Last edited at",
    },
    v: {
      info: "Version Information",
      teams: "Teams",
      v: "CurrentVersion : SNOW WHITE",
      u: "Framework : vue2.x/elementUI-2.13",
      s: "Features : Minimalist/EasyToOpt/SinglePage",
      a: "API Documentation : swagger2.0 CustomPage",
      feel: "Welcome Comments",
      submit: "Comment",
      name: "Nickname",
      suggest: "Suggest",
      namep: "Use anonymity please enter",
      suggestp: "Please enter your comment",
      score: "Score",
      self: "Copyright Â©2020 Potato Alliance",
      notEmpty: "Please fill in comments and suggestions",
      min: "Please fill in 15 to 300 characters"
    }
  },
  dialog: {
    info: {
      title: "Version Information",
      addr: "API Address",
      info: "API Information",
      t: "Title",
      v: "Version",
      d: "Description",
      author: "Author Information",
      a: "Author",
      e: "Email",
      p: "Homepage",
      tm: "Team",
      lecuce: "License Information",
      l: "License",
      la: "Address",
      total: "Total ",
      item: " API",
    },
    conf: {
      title: "Request Configuration",
      enable: "Enable",
      opt: "Operate",
      input: "Please enter content",
      del: "Delete",
      tab1: "RequestHeader",
      headname: "HeaderName",
      headc: "HeaderContent",
      tab2: "COOKIES",
      val: "Value",
      tab3: "Authentication",
      type: "Carry way",
      active: "Is it included in the URL",
      auth: "Type",
      cancle: "Cancel",
      save: "Save",
    }
  },
  menu: {
    nodata: "No found any menu",
    search: "Search your menu"
  },
  code: {
    req: "Item Parameter must",
    error: "Item JSON format is wrong",
    fetchError: 'Fetch data is wrong',
  }
};
en.el = el_en.el;
en.language = 'English';
export {
  en
};